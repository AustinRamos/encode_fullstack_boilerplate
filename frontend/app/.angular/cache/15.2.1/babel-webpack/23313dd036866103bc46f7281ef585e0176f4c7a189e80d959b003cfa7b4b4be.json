{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n      return arrayify(value);\n    case \"string\":\n      return toUtf8Bytes(value);\n    case \"bytes\":\n      return arrayify(value);\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n      return arrayify(value);\n  }\n  let match = type.match(regexNumber);\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    let size = parseInt(match[2] || \"256\");\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      logger.throwArgumentError(\"invalid number type\", \"type\", type);\n    }\n    if (isArray) {\n      size = 256;\n    }\n    value = BigNumber.from(value).toTwos(size);\n    return zeroPad(value, size / 8);\n  }\n  match = type.match(regexBytes);\n  if (match) {\n    const size = parseInt(match[1]);\n    if (String(size) !== match[1] || size === 0 || size > 32) {\n      logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n    }\n    if (arrayify(value).byteLength !== size) {\n      logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n    }\n    if (isArray) {\n      return arrayify((value + Zeros).substring(0, 66));\n    }\n    return value;\n  }\n  match = type.match(regexArray);\n  if (match && Array.isArray(value)) {\n    const baseType = match[1];\n    const count = parseInt(match[2] || String(value.length));\n    if (count != value.length) {\n      logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n    }\n    const result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return concat(result);\n  }\n  return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n  if (types.length != values.length) {\n    logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n  }\n  const tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n  return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n  return hashSha256(pack(types, values));\n}","map":{"version":3,"names":["BigNumber","arrayify","concat","hexlify","zeroPad","keccak256","hashKeccak256","sha256","hashSha256","toUtf8Bytes","regexBytes","RegExp","regexNumber","regexArray","Zeros","Logger","version","logger","_pack","type","value","isArray","match","size","parseInt","String","throwArgumentError","from","toTwos","byteLength","substring","Array","baseType","count","length","result","forEach","push","pack","types","values","tight","index"],"sources":["/Users/austinramos/Documents/Workspace/Encode_Bootcamp/14_15_code/frontend/app/node_modules/@ethersproject/solidity/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = BigNumber.from(value).toTwos(size);\n        return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n    return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n    return hashSha256(pack(types, values));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}