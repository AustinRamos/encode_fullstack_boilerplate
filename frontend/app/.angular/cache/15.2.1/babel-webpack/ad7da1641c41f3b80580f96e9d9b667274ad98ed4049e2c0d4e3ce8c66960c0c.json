{"ast":null,"code":"import _asyncToGenerator from \"/Users/austinramos/Documents/Workspace/Encode_Bootcamp/14_15_code/frontend/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Contract, ethers } from 'ethers';\n//import * as tokenJson from './assets/MyToken.json';\nimport tokenJson from '../assets/MyToken.json';\nconst API_URL = \"http://localhost:3000\";\nlet AppComponent = class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.blockNumber = 0;\n    //this.provider = ethers.getDefaultProvider('goerli');\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n    //setInterval(()=>{this.blockNumber +=1 })\n  }\n\n  getTokenAddress() {\n    return this.http.get(API_URL + \"/contract-address\");\n  }\n  getTotalSupply() {\n    return this.http.get(API_URL + \"/total-supply\");\n  }\n  syncBlock() {\n    //this.blockNumber = \"loading...\";\n    this.provider.getBlock(\"latest\").then(block => {\n      this.blockNumber = block.number;\n      this.transactions = block.transactions;\n    });\n    this.getTokenAddress().subscribe(resp => {\n      this.tokenContractAddress = resp.address;\n      this.updateTokenInfo();\n    });\n  }\n  updateTokenInfo() {\n    this.tokenContract = new Contract(this.tokenContractAddress ?? \"\", tokenJson.abi, this.provider);\n    this.tokenContract['totalSupply']().then(resp => {\n      const balanceStr = ethers.utils.formatEther(resp);\n      this.tokenSupply = parseFloat(balanceStr);\n    });\n  }\n  requestTokens() {\n    console.log(\"TODO: request tokens from backend passing address\");\n  }\n  // createWallet(){\n  //   this.userWallet = ethers.Wallet.createRandom().connect(this.provider);\n  //   this.userWallet.getBalance().then(bal=>{\n  //     this.userEthBalance = parseFloat(ethers.utils.formatEther(bal));\n  //   })\n  // }\n  handleAuth() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log(\"HANDLE AUTH***\");\n      window.ethereum.enable();\n      _this.provider.send(\"eth_requestAccounts\", []);\n      console.log(\"CONNECTED!\");\n      console.log(\"provider: \", _this.provider);\n      const signer = yield _this.provider.getSigner();\n      _this.userAddress = yield signer.getAddress();\n      _this.userWallet = signer;\n      _this.userWallet.getBalance().then(bal => {\n        _this.userEthBalance = parseFloat(ethers.utils.formatEther(bal));\n      });\n      // this.userTokenBalance = await \n      //const test = signer.connect(this.provider)\n      //console.log(\"Account:\", await signer.getAddress());\n    })();\n  }\n\n  clearBlock() {\n    this.blockNumber = 1;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","Contract","ethers","tokenJson","API_URL","AppComponent","constructor","http","provider","providers","Web3Provider","window","ethereum","getTokenAddress","get","getTotalSupply","syncBlock","getBlock","then","block","blockNumber","number","transactions","subscribe","resp","tokenContractAddress","address","updateTokenInfo","tokenContract","abi","balanceStr","utils","formatEther","tokenSupply","parseFloat","requestTokens","console","log","handleAuth","enable","send","signer","getSigner","userAddress","getAddress","userWallet","getBalance","bal","userEthBalance","clearBlock","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/austinramos/Documents/Workspace/Encode_Bootcamp/14_15_code/frontend/app/src/app/app.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport {BigNumber, Contract, ethers, Wallet} from 'ethers';\n//import * as tokenJson from './assets/MyToken.json';\nimport tokenJson from '../assets/MyToken.json';\n\ndeclare let window: any\n\nconst API_URL = \"http://localhost:3000\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  provider:  ethers.providers.Web3Provider;\n  blockNumber: number = 0;\n  transactions: string[] | undefined;\n  userWallet: ethers.Signer | undefined ;\n  userEthBalance: number | undefined;\n  userAddress: string | undefined;\n  userTokenBalance: number | undefined;\n  tokenContractAddress: string | undefined;\n  tokenSupply: number | undefined;\n  tokenContract: Contract | undefined ;\n\n  constructor( private http: HttpClient ){\n     //this.provider = ethers.getDefaultProvider('goerli');\n     this.provider = new ethers.providers.Web3Provider(window.ethereum);\n     \n     //setInterval(()=>{this.blockNumber +=1 })\n    }\n\n    getTokenAddress(){\n      return this.http.get<{address: string}>(API_URL + \"/contract-address\");\n    }\n\n    getTotalSupply(){\n      return this.http.get<{supply: number}>(API_URL + \"/total-supply\");\n    }\n\n    syncBlock(){\n      //this.blockNumber = \"loading...\";\n    this.provider.getBlock(\"latest\").then(block=>{\n      this.blockNumber = block.number;\n      this.transactions = block.transactions;\n      \n    });\n    this.getTokenAddress().subscribe(resp=>{\n      this.tokenContractAddress = resp.address;\n      this.updateTokenInfo()\n    })\n   \n    }\n\n    updateTokenInfo(){\n        this.tokenContract = new Contract(this.tokenContractAddress ?? \"\",tokenJson.abi,this.provider)\n\n        this.tokenContract['totalSupply']().then((resp: ethers.BigNumber)=>{\n          const balanceStr = ethers.utils.formatEther(resp)\n          this.tokenSupply=parseFloat(balanceStr)\n        })\n    \n      }\n\n      requestTokens(){\n        console.log(\"TODO: request tokens from backend passing address\")\n      }\n\n    // createWallet(){\n    //   this.userWallet = ethers.Wallet.createRandom().connect(this.provider);\n    //   this.userWallet.getBalance().then(bal=>{\n    //     this.userEthBalance = parseFloat(ethers.utils.formatEther(bal));\n    //   })\n    // }\n\n    async handleAuth() {\n      console.log(\"HANDLE AUTH***\")\n      window.ethereum.enable()\n      this.provider.send(\"eth_requestAccounts\", [])\n      console.log(\"CONNECTED!\")\n      console.log(\"provider: \" , this.provider);\n      const signer = await this.provider.getSigner();\n      this.userAddress = await signer.getAddress();\n      this.userWallet=signer\n\n        this.userWallet.getBalance().then(bal=>{\n        this.userEthBalance = parseFloat(ethers.utils.formatEther(bal));\n      })\n\n\n     // this.userTokenBalance = await \n      \n      \n      \n      //const test = signer.connect(this.provider)\n      //console.log(\"Account:\", await signer.getAddress());\n\n    }\n\n    clearBlock(){\n      this.blockNumber = 1;\n    \n    }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}